Ansible Hardening

Fully Patched 
Run the following playbook to fully patch pkgs
- name: Perform full patching
  package:
    name: '*'
    state: latest

Securing Remote Access via ssh

Let every admin use their own personal account on each target server, and let them sudo with passwords. This way no password is shared between two people. Ans we can check who did what on each server.

- name: Add admin group
  group:
    name: admin
    state: present

- name: Add local user
  user:
    name: admin
    group: admin
    shell: /bin/bash
    home: /home/admin
    create_home: yes
    state: present

- name: Add SSH public key for user
  authorized_key:
    user: admin
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    state: present

- name: Add sudoer rule for local user
  copy:
    dest: /etc/sudoers.d/admin
    src: etc/sudoers.d/admin
    owner: root
    group: root
    mode: 0440
    validate: /usr/sbin/visudo -csf %s

Above task will tasks add a local "admin" user and group, add an SSH public key for the user, and add a sudo rule for the admin user that permits passwordless sudo. The SSH key will be the same public key for the user that is locally executing the Ansible playbook.
Disable unused software & services
Security policy improvements


*********************Playbook*********************for above


- name: Add hardened SSH config
      copy:
        dest: /etc/ssh/sshd_config
        src: etc/ssh/sshd_config
        owner: root
        group: root
        mode: 0600
      notify: Reload SSH

    - name: Add SSH port to internal zone
      firewalld:
        zone: internal
        service: ssh
        state: enabled
        immediate: yes
        permanent: yes

    - name: Add permitted networks to internal zone
      firewalld:
        zone: internal
        source: "{{ item }}"
        state: enabled
        immediate: yes
        permanent: yes
      with_items: "{{ allowed_ssh_networks }}"

    - name: Drop ssh from the public zone
      firewalld:
        zone: public
        service: ssh
        state: disabled
        immediate: yes
        permanent: yes

    - name: Remove undesirable packages
      package:
        name: "{{ unnecessary_software }}"
        state: absent

    - name: Stop and disable unnecessary services
      service:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items: "{{ unnecessary_services }}"
      ignore_errors: yes

    - name: Set a message of the day
      copy:
        dest: /etc/motd
        src: etc/motd
        owner: root
        group: root
        mode: 0644

    - name: Set a login banner
      copy:
        dest: "{{ item }}"
        src: etc/issue
        owner: root
        group: root
        mode: 0644
      with_items:
        - /etc/issue
        - /etc/issue.net

  handlers:
    - name: Reload SSH
      service:
        name: sshd
        state: reloaded





Installing the ansible-hardening roles
Using Ansible Galaxy or git
I By ansible galaxy
ansible-galaxy install git+https://github.com/openstack/ansible-hardening

II Using Git

mkdir -p ~/.ansible/roles/
git clone https://github.com/openstack/ansible-hardening ~/.ansible/roles/ansible-hardening

Thn implementation as mentioned above // writing playbook
---

- name: Harden all systems
  hosts: all
  become: yes
  vars:
    security_enable_firewalld: no
    security_rhel7_initialize_aide: no
    security_ntp_servers:
      - 1.example.com
      - 2.example.com
  roles:
    - ansible-hardening



For dev-sec OS hardening
ansible-galaxy install dev-sec.os-hardening



Ad-hoc Commands -- Some Commonly and useful commands can be used for security purposes are 


 To see the uptime for all the hosts in a group called dbservers, you would type, as user root:
# ansible dbservers -a /usr/bin/uptime
To specify a particular user 
# ansible dbservers -a /usr/bin/uptime -u username
3. To become root user in a particular user using sudo
# ansible dbservers -a /usr/bin/uptime -u username 
 ↪--sudo [ask-sudo-pass]

4. To switch to different user there -u as :
# ansible dbservers -a /usr/bin/uptime -u username 
 ↪-U otheruser --sudo
# [ask-sudo-pass]

5.  We have default value of 5 for processes in case we want to enhance we can by 
# ansible dbservers -a /usr/bin/uptime -f 12

6. To use Ansible modules in ad hoc mode by using the -m option. like, Ansible pings the target hosts using the ping module:
# ansible dbservers -m ping

7. other  git clones etc like for for acquiring the Aqueduct package of scripts and manifests 
# git clone https://github.com/muktaluhach/Hybrid_task2/blob/main/hybrid_task2.tf





